#!/bin/sh
#                 ,--.                          ,--.
#                ,-|  | ,--,--.,--.--.,--.   ,--.`--',--,--,
#               ' .-. |' ,-.  ||  .--'|  |.'.|  |,--.|      \
#               \ `-' |\ '-'  ||  |   |   .'.   ||  ||  ||  |
#                `---'  `--`--'`--'   '--'   '--'`--'`--''--'
#
#     And Charles said, let there be easy to curl my OS X setup script...
#
#     This is my darwin sh file cherry-picked from @hjuutilainen/dotfiles,
#     @mathiasbynens/dotfiles and interweb scavenging. I usually run this
#     on every fresh OS X installation I marry to.
#/

#\
# Prelude - Utilities
#/

# Simple wrapper for sane colored echo.
echo() {
  local code="\033["
  case "$1" in
    black  | bk) color="${code}0;30m";;
    red    |  r) color="${code}1;31m";;
    green  |  g) color="${code}1;32m";;
    yellow |  y) color="${code}1;33m";;
    blue   |  b) color="${code}1;34m";;
    purple |  p) color="${code}1;35m";;
    cyan   |  c) color="${code}1;36m";;
    gray   | gr) color="${code}0;37m";;
    *) local text="$1"
  esac
  [ -z "$text" ] && local text="$color$2${code}0m"
  command echo "$text"
}

#\
echo green "Episode I - The sudo's Menace (Authorization)"
#/

# Get password upfront and extend timeout for a while.
sudo -v

# Update out `sudo` time stamp until we are done. Runs in the background â†’&
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

#\
echo green "Episode II - Attack of the Defaults (Settings)"
#/

echo "Disable the sound effects on boot"
sudo nvram SystemAudioVolume=" "

echo "Set sidebar icon size to medium"
defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2

echo "Show scrollbars only when scrolling"
defaults write NSGlobalDomain AppleShowScrollBars -string "WhenScrolling"

echo "Increase window resize speed for Cocoa applications"
defaults write NSGlobalDomain NSWindowResizeTime -float 0.001

echo "Save to disk (not to iCloud) by default"
defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

# <!> Removing this security mechanism could pose a security risk.
if [ "$NOQ" = true ]; then
  echo "Disable the 'Are you sure you want to open this application?' dialog"
  defaults write com.apple.LaunchServices LSQuarantine -bool false
fi

echo "Remove duplicates in the 'Open With' menu"
/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister \
  -kill -r -domain local -domain system -domain user

echo "Disable the crash reporter"
defaults write com.apple.CrashReporter DialogType -string "none"

echo "Set Help Viewer windows to non-floating mode"
defaults write com.apple.helpviewer DevMode -bool true

echo "Show IP address, hostname, OS version... on clicking the clock at login"
sudo defaults write /Library/Preferences/com.apple.loginwindow \
  AdminHostInfo HostName

echo "Restart automatically if the computer freezes"
sudo systemsetup -setrestartfreeze on

echo "Check for software updates daily, not just once per week"
defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

# I like notification center, but you can opt out with NONC
if [ "$NC" = true ]; then
  echo "Disable Notification Center and remove the menu bar icon"
  launchctl unload \
    -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist \
    2> /dev/null
fi

echo "Disable local Time Machine snapshots"
sudo tmutil disablelocal

# <!> Removing hibernation may speed up things, but it's a riskey business.
if [ "$NOHIB" = true ]; then
  echo "Disable hibernation (speeds up entering sleep mode)"
  sudo pmset -a hibernatemode 0
fi

echo "Disable the sudden motion sensor as it's not useful for SSDs"
sudo pmset -a sms 0

echo "Enable tap to click for this user and for the login screen"
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

echo "Tap with two fingers to emulate right click"
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad \
  TrackpadRightClick -bool true

echo "Enable three finger tap (look up)"
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad \
  TrackpadThreeFingerTapGesture -int 2

echo "Enable three finger drag"
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad \
  TrackpadThreeFingerDrag -bool true

echo "Zoom in or out"
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad \
  TrackpadPinch -bool true

echo "Smart zoom, double-tap with two fingers"
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad \
  TrackpadTwoFingerDoubleTapGesture -bool true

echo "Increase sound quality for Bluetooth headphones/headsets"
defaults write com.apple.BluetoothAudioAgent \
  "Apple Bitpool Min (editable)" -int 40

echo "Enable full keyboard access for all controls"
defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

echo "Use scroll gesture with the Ctrl (^) modifier key to zoom"
defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true
defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144

echo "Follow the keyboard focus while zoomed in"
defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true

echo "Disable press-and-hold for keys in favor of key repeat"
defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

echo "Set a blazingly fast keyboard repeat rate"
defaults write NSGlobalDomain KeyRepeat -int 0

echo "Disable auto-correct"
defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

echo "Save screenshots to the desktop"
defaults write com.apple.screencapture location -string "${HOME}/Desktop"

echo "Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)"
defaults write com.apple.screencapture type -string "png"

echo "Disable shadow in screenshots"
defaults write com.apple.screencapture disable-shadow -bool true

echo "Disable window animations and Get Info animations"
defaults write com.apple.finder DisableAllAnimations -bool true

echo "Set HOME as the default location for new Finder windows"
defaults write com.apple.finder NewWindowTarget -string "PfDe"
defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"

echo "Allow text selection in Quick Look"
defaults write com.apple.finder QLEnableTextSelection -bool true

echo "Display full POSIX path as Finder window title"
defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

echo "When performing a search, search the current folder by default"
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

echo "Disable the warning when changing a file extension"
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

echo "Show File Extensions"
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

echo "Enable spring loading for directories"
defaults write NSGlobalDomain com.apple.springing.enabled -bool true

echo "Remove the spring loading delay for directories"
defaults write NSGlobalDomain com.apple.springing.delay -float 0

echo "Avoid creating .DS_Store files on network volumes"
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

echo "Disable disk image verification"
defaults write com.apple.frameworks.diskimages skip-verify -bool true
defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true

echo "Automatically open a new Finder window when a volume is mounted"
defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true
defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true
defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true

echo "Disable the warning before emptying the Trash"
defaults write com.apple.finder WarnOnEmptyTrash -bool false

echo "Empty Trash securely by default"
defaults write com.apple.finder EmptyTrashSecurely -bool true

# (?) Set if you don't use any of the default OS X's friendly folders.
if [ "$HOMELESS" = true ]; then
  echo "Hide directories in $HOME"
  chflags hidden Documents Applications Library Music \
                 Public Desktop Downloads Movies Pictures
else
  echo "Show the ~/Library folder"
  chflags nohidden ~/Library
fi

echo "Remove Dropbox's green checkmark icons in Finder"
file=/Applications/Dropbox.app/Contents/Resources/emblem-dropbox-uptodate.icns
[ -e "${file}" ] && mv -f "${file}" "${file}.bak"

echo "Set the icon size of Dock items to 24 pixels"
defaults write com.apple.dock tilesize -int 24

echo "Change minimize/maximize window effect"
defaults write com.apple.dock mineffect -string "scale"

echo "Minimize windows into their application's icon"
defaults write com.apple.dock minimize-to-application -bool true

echo "Enable spring loading for all Dock items"
defaults write com.apple.dock enable-spring-load-actions-on-all-items \
  -bool true

echo "Show indicator lights for open applications in the Dock"
defaults write com.apple.dock show-process-indicators -bool true

echo "Wipe all (default) app icons from the Dock"
defaults write com.apple.dock persistent-apps -array

echo "Don't animate opening applications from the Dock"
defaults write com.apple.dock launchanim -bool false

echo "Speed up Mission Control animations"
defaults write com.apple.dock expose-animation-duration -float 0.1

echo "Disable Dashboard"
defaults write com.apple.dashboard mcx-disabled -bool true

echo "Don't show Dashboard as a Space"
defaults write com.apple.dock dashboard-in-overlay -bool true

echo "Don't automatically rearrange Spaces based on most recent use"
defaults write com.apple.dock mru-spaces -bool false

echo "Remove the auto-hiding Dock delay"
defaults write com.apple.dock autohide-delay -float 0

echo "Remove the animation when hiding/showing the Dock"
defaults write com.apple.dock autohide-time-modifier -float 0

echo "Automatically hide and show the Dock"
defaults write com.apple.dock autohide -bool true

echo "Add iOS Simulator to Launchpad"
sudo ln -sf "/Applications/Xcode.app/Contents/Developer/Applications/iOS Simulator.app" \
  "/Applications/iOS Simulator.app"

echo "Top right screen corner â†’ Mission Control"
defaults write com.apple.dock wvous-tr-corner -int 2
defaults write com.apple.dock wvous-tr-modifier -int 0

echo "Bottom right screen corner â†’ Desktop"
defaults write com.apple.dock wvous-br-corner -int 4
defaults write com.apple.dock wvous-br-modifier -int 0

echo "Disable continuous spell checking in Safari"
defaults write com.apple.Safari WebContinuousSpellCheckingEnabled -bool false

echo "Don't send search queries to Apple"
defaults write com.apple.Safari UniversalSearchEnabled -bool false
defaults write com.apple.Safari SuppressSearchSuggestions -bool true

echo "Press Tab to highlight each item on a web page"
defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true

echo "Show the full URL in the address bar (note: this still hides the scheme)"
defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true

echo "Set Safari's home page to 'about:blank' for faster loading"
defaults write com.apple.Safari HomePage -string "about:blank"

echo "Prevent Safari from opening â€˜safe' files automatically after downloading"
defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

echo "Hide Safari's bookmarks bar by default"
defaults write com.apple.Safari ShowFavoritesBar -bool false

echo "Hide Safari's sidebar in Top Sites"
defaults write com.apple.Safari ShowSidebarInTopSites -bool false

echo "Disable Safari's thumbnail cache for History and Top Sites"
defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2

echo "Enable Safari's debug menu"
defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

echo "Remove useless icons from Safari's bookmarks bar"
defaults write com.apple.Safari ProxiesInBookmarksBar "()"

echo "Enable the Develop menu and the Web Inspector in Safari"
defaults write com.apple.Safari IncludeDevelopMenu -bool true

defaults write com.apple.Safari \
  WebKitDeveloperExtrasEnabledPreferenceKey -bool true

defaults write com.apple.Safari \
  com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled \
  -bool true

echo "Add a context menu item for showing the Web Inspector in web views"
defaults write NSGlobalDomain WebKitDeveloperExtras -bool true

echo "Enable Web Inspector in Dictionary.app"
defaults write com.apple.Dictionary \
  WebKitDeveloperExtras -bool true

echo "Disable send and reply animations in Mail.app"
defaults write com.apple.mail DisableReplyAnimations -bool true
defaults write com.apple.mail DisableSendAnimations -bool true

echo "Copy email addresses as 'foo@example.com' instead of 'Foo Bar <foo@example.com>' in Mail.app"
defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false

echo "Add the keyboard shortcut âŒ˜ + Enter to send an email in Mail.app"
defaults write com.apple.mail NSUserKeyEquivalents -dict-add "Send" -string "@\\U21a9"

echo "Display emails in threaded mode, sorted by date (oldest at the top)"
defaults write com.apple.mail DraftsViewerAttributes \
  -dict-add "DisplayInThreadedMode" -string "yes"

defaults write com.apple.mail DraftsViewerAttributes \
  -dict-add "SortedDescending" -string "yes"

defaults write com.apple.mail DraftsViewerAttributes \
  -dict-add "SortOrder" -string "received-date"

echo "Disable automatic spell checking"
defaults write com.apple.mail SpellCheckingBehavior \
  -string "NoSpellCheckingEnabled"

echo "Show the main window when launching Activity Monitor"
defaults write com.apple.ActivityMonitor OpenMainWindow -bool true

echo "Visualize CPU usage in the Activity Monitor Dock icon"
defaults write com.apple.ActivityMonitor IconType -int 5

echo "Show all processes in Activity Monitor"
defaults write com.apple.ActivityMonitor ShowCategory -int 0

echo "Use plain text mode for new TextEdit documents"
defaults write com.apple.TextEdit RichText -int 0

echo "Open and save files as UTF-8 in TextEdit"
defaults write com.apple.TextEdit PlainTextEncoding -int 4
defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4

echo "Enable the WebKit Developer Tools in the Mac App Store"
defaults write com.apple.appstore WebKitDeveloperExtras -bool true

echo "Enable Debug Menu in the Mac App Store"
defaults write com.apple.appstore ShowDebugMenu -bool true

echo "Disable continuous spell checking"
defaults write com.apple.messageshelper.MessageController \
  SOInputLineSettings -dict-add "continuousSpellCheckingEnabled" \
  -bool false

#\
echo green "Episode III - Revenge of the Theme (Terminal Hacks)"
#/

echo "Only use UTF-8 in Terminal.app"
defaults write com.apple.terminal StringEncodings -array 4

if [ -n "$THEME" ]; then
  case "$THEME" in
    flat | peppermint | monokai | hemisu | solarized | tomorrow-night | smyck | dracula)
      # Uppercase first character to match <scheme>.terminal names.
      THEME=$(echo "$THEME" | awk '{ print toupper( substr( $0, 1, 1 ) ) substr( $0, 2 ); }')
    ;;
  *)
    echo "Invalid theme name. See the documentation and try again."
    THEME=""
    ;;
  esac
fi

if [ -n "$THEME" ]; then
  # Create temporary directory to save $THEME.
  theme_dir=$(mktemp -d $HOME/XXXX)

  echo "Downloading $THEME theme to $theme_dir/"

  curl -L "https://raw.githubusercontent.com/bucaran/darwin/master/themes/$THEME.terminal" \
    > "$theme_dir/$THEME.terminal"

osascript <<EOD
  tell application "Terminal"
    local allOpenedWindows
    local initialOpenedWindows
    local windowID
    set themeName to "$THEME"

    set initialOpenedWindows to id of every window

    do shell script "open '$theme_dir/" & themeName & ".terminal'"
    delay 1
    set default settings to settings set themeName
    set allOpenedWindows to id of every window
    repeat with windowID in allOpenedWindows
      if initialOpenedWindows does not contain windowID then
        close (every window whose id is windowID)
      else
        set current settings of tabs of (every window whose id is windowID) to settings set themeName
      end if
    end repeat
  end tell
EOD

  if [ "$theme_dir" != "$HOME" ]; then
    # No need to keep the theme's copy around.
    rm -rf "$theme_dir"
  fi
fi

#\
echo green "Episode IV - Homebrew, A new hope."
#/
#\
#-> Do `xcode-select --install` later, but we need to git some stuff.
#/
type git >/dev/null 2>&1 || { alias git='xcrun git'; }

if [ "$BREW" != false ]; then
  homebrew="$HOME/.brew"

  # Do you even brew bro?
  if [ ! -d $homebrew ]; then
    echo "Clone homebrew into $homebrew"
    git clone "https://github.com/Homebrew/homebrew.git" $homebrew

    bin=/usr/local/bin
    if [ ! -d $bin ]; then
      echo "Creating $bin because you will need it sooner or later."
      sudo mkdir -p $bin
    fi

    echo "Changing ownership in /usr/local, the way of the brew"
    sudo chown -R $(whoami) $(dirname $bin)

    echo "Symlinking local brew repo into bin to let the fumes in."
    sudo ln -s $homebrew/bin/brew $bin
  fi
fi

#\
echo green "Episode V - The Type Strikes Back - (Powerline Fonts)"
#/

if [ "$FONTS" = true ]; then
  echo "Patched fonts for Powerline users."

  fonts_dir="$HOME/Library/Fonts"
  powerline=$(mktemp -d $HOME/XXXX)

  # Ready for some powerline fontgastic with awesome?
  git clone "https://github.com/powerline/fonts" $powerline

  find $powerline -name "*.[o,t]tf" | while read font
    do
      cp "$font" "$fonts_dir"
    done

  rm -rf $powerline
  echo "All fonts installed to '$fonts_dir'"
fi

#\
echo green "Episode VI - Return of the Brew (Packages)"
#/

if [ -d "$HOME/.brew" ]; then
  if [ "$FISH" = true ]; then
    if ! type fish >/dev/null 2>&1; then
      echo "Installing fish, the friendly shell..."
      brew install fish

      echo "/usr/local/bin/fish" | sudo tee -a /etc/shells
      chsh -s /usr/local/bin/fish
    fi
  fi

  if [ "$OMF" = true ]; then
    OMF="$HOME/.oh-my-fish"
    config_path="$HOME/.config/fish"

    if [ ! -d "$OMF" ]; then
      echo "Downloading Oh-my-fish!"
      git clone "https://github.com/bpinto/oh-my-fish" "$OMF"
    fi

    if [ -f "$config_path/config.fish" ]; then
      config_bak=$(mktemp "$config_path/config.fish.XXXX")
      mv $config_path/config.fish "$config_bak"
    fi
    echo "Adding default configuration file to $config_path"
    cp "$OMF/templates/config.fish" "$config_path/config.fish"
  fi

  if [ "$ACK" = true ]; then
    brew install ack
  fi

  if [ "$CASK" = true ]; then
    brew install caskroom/cask/brew-cask

    if [ "$MVIM" = true ]; then
      brew cask install macvim
    fi

    if [ "$VLC" = true ]; then
      brew cask install vlc
    fi

    if [ "$VAGRANT" = true ]; then
      brew cask install vagrant
    fi
  fi

  if [ "$GIT" = true ]; then
    brew install git
  fi

  if [ "$IMGMAGICK" = true ]; then
    brew install imagemagick --with-webp
  fi

  if [ "$LYNX" = true ]; then
    brew install lynx
  fi

  if [ "$TREE" = true ]; then
    brew install tree
  fi

  if [ "$NODE" = true ]; then
    brew install node
  fi

  if [ "$PYENV" = true ]; then
    brew install pyenv
    echo "Make sure to add 'eval \$(pyenv init -)' to your profile."
  fi

  if [ "$RBENV" = true ]; then
    brew install rbenv
    echo "Make sure to add 'eval \$(rbenv init -)' to your profile."
  fi

  if [ "$FFMPEG" = true ]; then
    brew install ffmpeg
  fi

  if [ "$GIFSICLE" = true ]; then
    brew install gifsicle
  fi
fi

#\
echo green "Episode VII - The dotfile Awakens (dotfile configuration)"
#/

# The undocumented $ONI flag will download and setup my own dotfiles.
if [ "$ONI" = true ]; then
  dotfiles="$HOME/dotfiles"
  # darwin is for fresh OS X machines, there can't be no dotfiles.
  if [ ! -d "$dotfiles" ]; then
    echo yellow "Downloading @bucaran dotfiles"
    git clone "https://github.com/bucaran/dotfiles" "$dotfiles"
    [ -x "$dotfiles/link" ] || chmod +x "$dotfiles/link"
    sh "$dotfiles/link"
  fi

elif [ -n "$CONFIG" ]; then
  gitfiles="https://raw.githubusercontent.com/bucaran/gitfiles/master"

  if [ ! -f "$HOME/.gitconfig" ]; then
    echo "Downloading .gitconfig"
    curl -L "$gitfiles/.gitconfig" > .gitconfig
  fi

  if [ ! -f "$HOME/.gitignore" ]; then
    echo "Downloading .gitignore"
    curl -L "$gitfiles/.gitignore" > .gitignore
  fi

  fields=(user.name user.email github.user)
  index=0

  echo "$CONFIG" | tr \; "\n" | while read value
    do
      eval "git config --global ${fields[$index]} $value"
      ((index++))
    done
fi

echo
echo yellow "                 ,--.                          ,--."
echo green "                ,-|  | ,--,--.,--.--.,--.   ,--.\`--',--,--,"
echo blue "               ' .-. |' ,-.  ||  .--'|  |.'.|  |,--.|      \\ "
echo purple "               \ \`-' |\ '-'  ||  |   |   .'.   ||  ||  ||  |"
echo red "                \`---'  \`--\`--'\`--'   '--'   '--'\`--'\`--''--'"
echo

if [ "$RESTART" = true ]; then
  osascript -e 'tell app "System Events" to restart'
else
  echo "Please restart your computer."
fi
